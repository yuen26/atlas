apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-username: cm9vdA==
  mysql-password: cm9vdA==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init
data:
  01_db_auth.sql: |
    CREATE DATABASE IF NOT EXISTS db_auth;
    
    USE db_auth;
    
    CREATE TABLE IF NOT EXISTS users
    (
        id         INT          NOT NULL AUTO_INCREMENT PRIMARY KEY,
        username   VARCHAR(255) NOT NULL,
        password   VARCHAR(255) NOT NULL,
        role       VARCHAR(255) NOT NULL,
        created_at DATETIME     NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME              DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE INDEX idx_username (username)
    ) ENGINE = INNODB;
    
    -- Plain password: 123456
    INSERT INTO users (username, password, role)
    VALUES ('admin', '$2a$12$.sw34Jx7f/I9aln/s9b2.eMcs6Ji9HpcudPAl2BOkLPmupGhsU8yO', 'ADMIN'),
           ('customer', '$2a$12$.sw34Jx7f/I9aln/s9b2.eMcs6Ji9HpcudPAl2BOkLPmupGhsU8yO', 'CUSTOMER');

  02_db_customer.sql: |
    CREATE DATABASE IF NOT EXISTS db_customer;
    
    USE db_customer;
    
    CREATE TABLE IF NOT EXISTS customer
    (
        user_id      INT            NOT NULL AUTO_INCREMENT PRIMARY KEY,
        first_name   VARCHAR(255)   NOT NULL,
        last_name    VARCHAR(255)   NOT NULL,
        email        VARCHAR(255)   NOT NULL,
        phone_number VARCHAR(20)    NOT NULL,
        credit       DECIMAL(11, 2) NOT NULL DEFAULT 0,
        created_at   DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at   DATETIME                DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE INDEX idx_email (email)
    ) ENGINE = INNODB;
    
    INSERT INTO customer (user_id, first_name, last_name, email, phone_number, credit)
    VALUES (1, 'John', 'Doe', 'customer@atlas.org', '0987654321', 100000);
    
    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id         BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event      VARCHAR(1000) NOT NULL,
        created_at DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  03_db_product.sql: |
    CREATE DATABASE IF NOT EXISTS db_product;
    
    USE db_product;
    
    CREATE TABLE IF NOT EXISTS product
    (
        id         INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
        name       VARCHAR(255)  NOT NULL,
        price      DECIMAL(9, 2) NOT NULL,
        quantity   INT           NOT NULL,
        created_at DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;
    
    INSERT INTO product (name, price, quantity, created_at)
    VALUES ('Smartphone', 599.99, 100, '2023-01-15 00:00:00'),
           ('Jeans', 49.99, 100, '2023-02-20 01:00:00'),
           ('Dark Chocolate', 1.99, 100, '2023-03-01 02:05:00'),
           ('Action Figure', 15.99, 0, '2023-04-10 03:10:00'),
           ('Laptop', 1200.00, 100, '2023-05-25 04:15:00'),
           ('T-Shirt', 20.99, 100, '2023-06-15 05:20:00'),
           ('Milk Chocolate', 3.49, 100, '2023-07-05 06:25:00'),
           ('Board Game', 29.99, 100, '2023-08-20 07:30:00'),
           ('Electric Kettle', 35.99, 0, '2023-09-10 08:35:00'),
           ('Running Shoes', 89.99, 100, '2023-10-05 09:40:00');
    
    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id         BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event      VARCHAR(1000) NOT NULL,
        created_at DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  04_db_order.sql: |
    CREATE DATABASE IF NOT EXISTS db_order;
    
    USE db_order;
    
    CREATE TABLE IF NOT EXISTS orders
    (
        id         INT            NOT NULL AUTO_INCREMENT PRIMARY KEY,
        user_id    INT            NOT NULL,
        amount     DECIMAL(11, 2) NOT NULL,
        address    VARCHAR(500),
        status     VARCHAR(20)    NOT NULL,
        created_at DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME                DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;
    
    CREATE TABLE IF NOT EXISTS order_item
    (
        id            INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
        order_id      INT           NOT NULL,
        product_id    INT           NOT NULL,
        product_price DECIMAL(9, 2) NOT NULL,
        quantity      INT           NOT NULL
    ) ENGINE = INNODB;
    
    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id         BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event      VARCHAR(1000) NOT NULL,
        created_at DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  05_db_order.sql: |
    CREATE DATABASE IF NOT EXISTS db_notification;
    
    USE db_notification;
    
    CREATE TABLE IF NOT EXISTS outbox_message
    (
        id         BIGINT        NOT NULL AUTO_INCREMENT PRIMARY KEY,
        event      VARCHAR(1000) NOT NULL,
        created_at DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME               DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE = INNODB;

  06_db_zipkin.sql: |
    CREATE DATABASE IF NOT EXISTS db_zipkin;
    
    USE db_zipkin;
    
    CREATE TABLE IF NOT EXISTS zipkin_spans
    (
        `trace_id_high`       BIGINT       NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',
        `trace_id`            BIGINT       NOT NULL,
        `id`                  BIGINT       NOT NULL,
        `name`                VARCHAR(255) NOT NULL,
        `remote_service_name` VARCHAR(255),
        `parent_id`           BIGINT,
        `debug`               BIT(1),
        `start_ts`            BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',
        `duration`            BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query',
        PRIMARY KEY (`trace_id_high`, `trace_id`, `id`)
    ) ENGINE = InnoDB
      ROW_FORMAT = COMPRESSED
      CHARACTER SET = utf8
      COLLATE utf8_general_ci;
    
    ALTER TABLE zipkin_spans
        ADD INDEX (`trace_id_high`, `trace_id`) COMMENT 'for getTracesByIds';
    ALTER TABLE zipkin_spans
        ADD INDEX (`name`) COMMENT 'for getTraces and getSpanNames';
    ALTER TABLE zipkin_spans
        ADD INDEX (`remote_service_name`) COMMENT 'for getTraces and getRemoteServiceNames';
    ALTER TABLE zipkin_spans
        ADD INDEX (`start_ts`) COMMENT 'for getTraces ordering and range';
    
    CREATE TABLE IF NOT EXISTS zipkin_annotations
    (
        `trace_id_high`         BIGINT       NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',
        `trace_id`              BIGINT       NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',
        `span_id`               BIGINT       NOT NULL COMMENT 'coincides with zipkin_spans.id',
        `a_key`                 VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',
        `a_value`               BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',
        `a_type`                INT          NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',
        `a_timestamp`           BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',
        `endpoint_ipv4`         INT COMMENT 'Null when Binary/Annotation.endpoint is null',
        `endpoint_ipv6`         BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',
        `endpoint_port`         SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',
        `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'
    ) ENGINE = InnoDB
      ROW_FORMAT = COMPRESSED
      CHARACTER SET = utf8
      COLLATE utf8_general_ci;
    
    ALTER TABLE zipkin_annotations
        ADD UNIQUE KEY (`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`trace_id_high`, `trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`trace_id_high`, `trace_id`) COMMENT 'for getTraces/ByIds';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`a_type`) COMMENT 'for getTraces and autocomplete values';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`a_key`) COMMENT 'for getTraces and autocomplete values';
    ALTER TABLE zipkin_annotations
        ADD INDEX (`trace_id`, `span_id`, `a_key`) COMMENT 'for dependencies job';
    
    CREATE TABLE IF NOT EXISTS zipkin_dependencies
    (
        `day`         DATE         NOT NULL,
        `parent`      VARCHAR(255) NOT NULL,
        `child`       VARCHAR(255) NOT NULL,
        `call_count`  BIGINT,
        `error_count` BIGINT,
        PRIMARY KEY (`day`, `parent`, `child`)
    ) ENGINE = InnoDB
      ROW_FORMAT = COMPRESSED
      CHARACTER SET = utf8
      COLLATE utf8_general_ci;
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql  # Selector should match labels below
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels: # Add labels here to match the selector
        app: mysql      # These labels must match with the selector.matchLabels
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
              protocol: TCP
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: mysql-init
            - mountPath: /var/lib/mysql
              name: mysql-data
          args:
            - --default-authentication-plugin=mysql_native_password
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - "mysqladmin ping -uroot -p$MYSQL_ROOT_PASSWORD"
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "mysqladmin ping -uroot -p$MYSQL_ROOT_PASSWORD"
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: mysql-init
          configMap:
            name: mysql-init
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-data
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
  clusterIP: None
